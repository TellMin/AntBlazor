@page "/Item"
@using AntBlazor.Shared.DTO
@using AntBlazor.Client.Interfaces.Services;
@inject IItemService _ItemService;
@attribute [AllowAnonymous]
@using AntDesign.TableModels
@using System.ComponentModel.DataAnnotations

<PageTitle>Ant Table</PageTitle>
<br/>
<Text>Ant Table</Text>

<a href="https://antblazor.com/en-US/components/table">Table - Ant Design Blazor</a>

<Table TItem="ItemDto" DataSource="@Items">
    <Column Title="Item Id" @bind-Field="@context.Id" Sortable />
    <Column Title="Item Name" @bind-Field="@context.Name" Sortable />
    <Column Title="ItemStatus" @bind-Field="@context.ItemStatus" Sortable Filters="ItemStatusFilter" OnFilter="(a, b) => a == b"/>
    <Column Title="Category" @bind-Field="@context.Category" Sortable Filters="ItemCateforyFilter" OnFilter="(a, b) => a == b"/>
    <Column Title="Stock" @bind-Field="@context.Stock" Sortable />
    <Column Title="ReleaseDate" @bind-Field="@context.ReleaseDate" Sortable />
    <Column Title="DiscontinuationDate" @bind-Field="@context.DiscontinuationDate" Sortable />
</Table>

@code {

    ItemDto[] Items = Array.Empty<ItemDto>();

    public TableFilter<string>[] ItemCateforyFilter =
        {
        new() {Text = "Housewares", Value = "Housewares"},
        new() {Text = "Miscellaneous", Value = "Miscellaneous"},
        new() {Text = "Wall-mounted", Value = "Wall-mounted"},
        new() {Text = "Thursday", Value = "Thursday"},
        new() {Text = "Wallpaper", Value = "Wallpaper"},
        new() {Text = "Rugs", Value = "Rugs"},
        new() {Text = "Accessories", Value = "Accessories"},
        new() {Text = "Other", Value = "Other"},
        new() {Text = "Furniture Sets", Value = "Furniture Sets"},
        new() {Text = "Themed Furniture", Value = "Themed Furniture"},
    };

    public TableFilter<string>[] ItemStatusFilter =
        {
        new() {Text = "Themed Orderd", Value = "Themed Orderd"},
        new() {Text = "Out of Stock", Value = "Out of Stock"},
        new() {Text = "Laughing", Value = "Laughing"},
        new() {Text = "Angry", Value = "Angry"},
        new() {Text = "Happy", Value = "Happy"},
        new() {Text = "Completed", Value = "Completed"},
        new() {Text = "Hopping", Value = "Hopping"},
        new() {Text = "Kidding", Value = "Kidding"},
        new() {Text = "Depressed", Value = "Depressed"},
        new() {Text = "Waiting for pick", Value = "Waiting for pick"},
    };

    protected override async Task OnInitializedAsync()
    {
        Items = await GetItemsAsync();
        base.OnInitialized();
    }

    public async Task<ItemDto[]> GetItemsAsync()
        => await _ItemService.GetItems();
}